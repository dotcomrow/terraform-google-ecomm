cat Menu.graphql <<EOF \n""" Represents a menu item """ type MenuItem { name: String! url: String! children: [MenuItem] } """ Represents a menu """ type Menu { items: [MenuItem] } extend type Query { menu: Menu } \n EOF \n cat ThemeConfig.graphql <<EOF \n""" Represents a link html tag. """ type Link { href: String! text: String! title: String rel: String target: String type: String media: String hrefLang: String sizes: String as: String crossOrigin: String referrerPolicy: String integrity: String } """ Represents a meta html tag. """ type Meta { name: String content: String charSet: String property: String itemProp: String itemType: String itemID: String httpEquiv: String lang: String } """ Represents a script html tag. """ type Script { src: String type: String async: Boolean defer: Boolean crossOrigin: String integrity: String noModule: String nonce: String } """ Represents a base html tag. """ type Base { href: String target: String } """ Represents a logo. """ type Logo { src: String alt: String width: String height: String } """ Represents a nav head tag. """ type HeadTag { links: [Link] metas: [Meta] scripts: [Script] base: Base } """ Represents a base theme config. """ type ThemeConfig { logo: Logo headTags: HeadTag copyRight: String } extend type Query { themeConfig: ThemeConfig } \n EOF \n cat CmsPage.graphql <<EOF \n""" Lookup CMS page by ID """ type CmsPage { cmsPageId: Int uuid: String! layout: String! status: Int! urlKey: String! name: String! content: String! metaTitle: String metaKeywords: String metaDescription: String url: String! editUrl: String! updateApi: String! deleteApi: String! } """ Return a collection of CMS pages """ type CmsPageCollection { items: [CmsPage] currentPage: Int! total: Int! currentFilters: [Filter] } extend type Query { cmsPage(id: Int): CmsPage cmsPages(filters: [FilterInput]): CmsPageCollection } \n EOF \n cat PageInfo.graphql <<EOF \n""" Represents a breadcrumb information. """ type Breadcrumb { url: String! title: String! } """ Represents a page information. """ type PageInfo { url: String! title: String! description: String!, breadcrumbs: [Breadcrumb!] } extend type Query { pageInfo: PageInfo } \n EOF \n cat Url.graphql <<EOF \n""" A query parameter for a URL """ input UrlParam { key: String! value: String! } extend type Query { url(routeId: String!, params: [UrlParam]): String! } \n EOF \n cat Province.graphql <<EOF \n""" The `Province` type represents a province/state. """ type Province { name: String! code: String! countryCode: String! } extend type Query { provinces(countries: [String]): [Province] } \n EOF \n cat Currency.graphql <<EOF \n""" A currency """ type Currency { name: String! code: String! } extend type Query { currencies: [Currency]! } \n EOF \n cat Timezone.graphql <<EOF \n""" A timezone """ type Timezone { name: String! code: String! } extend type Query { timezones: [Timezone]! } \n EOF \n cat DateTime.graphql <<EOF \n""" A DateTime is a string with a timezone. """ type DateTime { value: String timezone: String text(format: String): String } \n EOF \n cat Country.graphql <<EOF \n""" The `Country` type represents a country. """ type Country { name: String! code: String! provinces: [Province] } extend type Query { countries(countries: [String]): [Country] allowedCountries: [Country] } \n EOF \n cat CODSetting.graphql <<EOF \nextend type Setting { codPaymentStatus: Int codDislayName: String } \n EOF \n cat Coupon.graphql <<EOF \nscalar JSON extend type Cart { applyCouponApi: String! } \n EOF \n cat Coupon.admin.graphql <<EOF \n""" Represents a coupon """ type Coupon { couponId: Int uuid: String! status: Int! description: String! discountAmount: Float! freeShipping: Int! discountType: String! coupon: String! usedTime: Int targetProducts: TargetProducts condition: OrderCondition userCondition: UserCondition buyxGety: [ByXGetY] maxUsesTimePerCoupon: Int maxUsesTimePerCustomer: Int startDate: DateTime endDate: DateTime editUrl: String! updateApi: String! deleteApi: String! } """ Represents a signle product used in the condition of a coupon. """ type MatchProductFilter { key: String! operator: String! value: JSON qty: String } """ Represents the target products of a coupon. """ type TargetProducts { maxQty: String products: [MatchProductFilter] } """ Represents the condition of a coupon. """ type OrderCondition { orderTotal: String orderQty: String requiredProducts: [MatchProductFilter] } """ Represents the buy x get y condition of a coupon. """ type ByXGetY { sku: String! buyQty: String getQty: String maxY: String discount: String } """ Represents the user condition of a coupon. """ type UserCondition { groups: [String] emails: String purchased: String } """ Returns a collection of coupons """ type CouponCollection { items: [Coupon] currentPage: Int! total: Int! currentFilters: [Filter] } extend type Query { coupon(id: Int): Coupon coupons(filters: [FilterInput]): CouponCollection } \n EOF \n cat AdminUser.admin.graphql <<EOF \n""" Retrieves a single admin user by ID """ type AdminUser { adminUserId: Int! uuid: String! status: Int! email: String! fullName: String! } """ Retrieves a collection of admin users """ type AdminUserCollection { items: [AdminUser] currentPage: Int! total: Int! currentFilters: [Filter] } extend type Query { adminUser(id: Int): AdminUser currentAdminUser: AdminUser adminUsers(filters: [FilterInput]): AdminUserCollection } \n EOF \n cat FeaturedProduct.graphql <<EOF \nextend type Query { featuredProducts(limit: Int): [Product] } \n EOF \n cat Collection.admin.graphql <<EOF \nextend type Collection { editUrl: String addProductUrl: String updateApi: String! deleteApi: String! } extend type Product { removeFromCollectionUrl: String } \n EOF \n cat Collection.graphql <<EOF \n""" The `Collection` type represents a product collection. """ type Collection { collectionId: ID! uuid: String! name: String! description: String code: String! products(filters: [FilterInput]): ProductCollection } """ Returns a collection of product collection. """ type CollectionCollection { items: [Collection] currentPage: Int! total: Int! currentFilters: [Filter] } extend type Product { collections: [Collection], } extend type Query { collections(filters: [FilterInput]): CollectionCollection collection(code: String): Collection } \n EOF \n cat Attribute.admin.graphql <<EOF \n""" Represents a single attribute group """ type AttributeGroup { attributeGroupId: ID! uuid: String! groupName: String! updateApi: String! attributes: [Attribute] } extend type Attribute { groups: [AttributeGroup] editUrl: String! updateApi: String! deleteApi: String! } """ Represents a collection of attributes """ type AttributeCollection { items: [Attribute] currentPage: Int! total: Int! currentFilters: [Filter] } """ Represents a collection of attribute groups """ type AttributeGroupCollection { items: [AttributeGroup] currentPage: Int! total: Int! currentFilters: [Filter] } extend type Query { attributes(filters: [FilterInput]): AttributeCollection attributeGroups(filters: [FilterInput]): AttributeGroupCollection } \n EOF \n cat Attribute.graphql <<EOF \n""" Represents a single attribute option """ type AttributeOption { attributeOptionId: ID! uuid: String! optionText: String! } """ Represents a single attribute """ type Attribute { attributeId: ID! uuid: String! attributeCode: String! attributeName: String! type: String! isRequired: Int! displayOnFrontend: Int! sortOrder: Int! isFilterable: Int! options: [AttributeOption] } extend type Query { attribute(id: Int): Attribute } \n EOF \n cat ProductAttribute.graphql <<EOF \n""" The ProductAttributeIndex object defines the attribute index for a product. """ type ProductAttributeIndex { attributeId: ID! attributeName: String! attributeCode: String! optionId: Int optionText: String } extend type Product { attributeIndex: [ProductAttributeIndex] attributes: [Attribute] } \n EOF \n cat Variant.graphql <<EOF \n""" Represents a product variant attribute """ type VariantAttribute { attributeId: Int! attributeCode: String! attributeName: String! options: [VariantAttributeOption] } """ Represents a product variant attribute option """ type VariantAttributeOption { optionId: Int! optionText: String! productId: Int } """ Represents a product variant attribute index """ type VariantAttributeIndex { attributeId: ID! attributeCode: String! optionId: Int! optionText: String! } """ Represents a product variant """ type Variant { id: String! product: Product! attributes: [VariantAttributeIndex]! removeUrl: String! } """ Represents a product variant group """ type VariantGroup { variantGroupId: Int! variantAttributes: [VariantAttribute]! items: [Variant] addItemApi: String! } extend type Product { variantGroup: VariantGroup } \n EOF \n cat CustomOption.graphql <<EOF \n""" Represents a product option """ type Option { optionId: ID! optionName: String! optionType: String! isRequired: Boolean! values: [OptionValue] } """ Represents a product option value """ type OptionValue { valueId: ID! value: String! extraPrice: Price! } extend type Product { options: [Option] } \n EOF \n cat ProductImage.graphql <<EOF \n""" The `Image` type represents a Product image. """ type Image { id: ID! uuid: String! alt: String url: String listing: String single: String thumb: String origin: String } extend type Product { image: Image gallery: [Image] } \n EOF \n cat Product.admin.graphql <<EOF \nextend type Product { editUrl: String updateApi: String! deleteApi: String! } \n EOF \n cat Inventory.graphql <<EOF \n""" The `Inventory` type represents a product's inventory information. """ type Inventory { isInStock: Boolean! stockAvailability: Int! manageStock: Int! } extend type Product { inventory: Inventory! } \n EOF \n cat Inventory.admin.graphql <<EOF \nextend type Inventory { qty: Int! } \n EOF \n cat ProductPrice.graphql <<EOF \n""" Represents a price for a product. """ type ProductPrice { regular: Price! special: Price! } extend type Product { price: ProductPrice! } \n EOF \n cat Product.graphql <<EOF \n""" Represents a product. """ type Product { productId: Int! uuid: String! name: String! status: Int! sku: String! weight: Weight! taxClass: Int description: String urlKey: String metaTitle: String metaDescription: String metaKeywords: String variantGroupId: ID visibility: Int groupId: ID url: String } """ Returns a collection of products. """ type ProductCollection { items: [Product] currentPage: Int! total: Int! currentFilters: [Filter] } extend type Query { product(id: ID): Product products(filters: [FilterInput]): ProductCollection } \n EOF \n cat Category.admin.graphql <<EOF \nextend type Category { editUrl: String updateApi: String! deleteApi: String! addProductUrl: String } extend type Product { removeFromCategoryUrl: String } \n EOF \n cat Category.graphql <<EOF \n""" The `Category` type represents a category object. """ type Category { categoryId: ID! uuid: String! name: String! status: Int! includeInNav: Int! description: String urlKey: String metaTitle: String metaDescription: String metaKeywords: String image: CategoryImage products(filters: [FilterInput]): ProductCollection children: [Category] parent: Category path: [Category] url: String availableAttributes: [FilterAttribute] priceRange: PriceRange } """ The `CategoryImage` type represents a category image object. """ type CategoryImage { alt: String! url: String! } """ The `FilterInput` type represents a filter input object. """ input FilterInput { key: String! operation: String! value: String } """ The `Filter` type represents a filter object. """ type Filter { key: String! operation: String! value: String! } """ The `FilterOption` type represents a filter option object. """ type FilterOption { optionId: Int! optionText: String! } """ The `FilterAttribute` type represents a filter attribute object. """ type FilterAttribute { attributeName: String! attributeCode: String! attributeId: Int! options: [FilterOption] } """ Returns a collection of categories. """ type CategoryCollection { items: [Category] currentPage: Int! total: Int! currentFilters: [Filter] } type PriceRange { min: Float! max: Float! } extend type Product { category: Category, } extend type Query { categories(filters: [FilterInput]): CategoryCollection category(id: Int): Category } \n EOF \n cat PaypalSetting.admin.graphql <<EOF \nextend type Setting { paypalPaymentStatus: Int paypalClientId: String paypalClientSecret: String paypalWebhookSecret: String paypalPaymentIntent: String } \n EOF \n cat PaypalSetting.graphql <<EOF \nextend type Setting { paypalDislayName: String paypalEnvironment: String } \n EOF \n cat Customer.graphql <<EOF \n""" Represents a customer """ type Customer { customerId: Int! uuid: String! status: Int! email: String! fullName: String! createdAt: Date! } extend type Query { currentCustomer: Customer } \n EOF \n cat CustomerSetting.graphql <<EOF \nextend type Setting { customerAddressSchema: JSON } \n EOF \n cat Customer.admin.graphql <<EOF \nextend type Customer { editUrl: String! updateApi: String! deleteApi: String! } """ Return a collection of customers """ type CustomerCollection { items: [Customer] currentPage: Int! total: Int! currentFilters: [Filter] } extend type Query { customer(id: String): Customer customers(filters: [FilterInput]): CustomerCollection } \n EOF \n cat CustomerGroup.graphql <<EOF \n""" Represents a customer group. """ type CustomerGroup { customerGroupId: Int! groupName: String! } extend type Customer { group: CustomerGroup } \n EOF \n cat CustomerGroup.admin.graphql <<EOF \nextend type CustomerGroup { editUrl: String! customers: [Customer] } """ Represents a collection of customer groups """ type CustomerGroupCollection { items: [CustomerGroup] currentPage: Int! total: Int! currentFilters: [Filter] } extend type Query { customerGroup: CustomerGroup customerGroups: CustomerGroupCollection } \n EOF \n cat Query.graphql <<EOF \n""" The root query type, represents all of the entry points into our object graph. """ type Query { hello: String! } \n EOF \n cat TaxSetting.graphql <<EOF \nextend type Setting { displayCatalogPriceIncludeTax: Boolean displayCheckoutPriceIncludeTax: Boolean } \n EOF \n cat TaxSetting.admin.graphql <<EOF \nextend type Setting { defaultProductTaxClassId: Int defaultShippingTaxClassId: Int baseCalculationAddress: String } \n EOF \n cat TaxClass.admin.graphql <<EOF \n""" Represents a tax rate. """ type TaxRate { taxRateId: Int! taxClassId: Int! uuid: String! name: String! rate: Float! isCompound: Boolean! country: String! province: String! postcode: String! priority: Int! updateApi: String! deleteApi: String! } """ Represents a tax class. """ type TaxClass { taxClassId: Int! uuid: String! name: String! rates: [TaxRate] addRateApi: String! } """ Returns a collection of tax classes. """ type TaxClassCollection { items: [TaxClass] currentPage: Int! total: Int! currentFilters: [Filter] } extend type Query { taxClasses: TaxClassCollection taxClass(id: String!): TaxClass } \n EOF \n cat StoreSetting.graphql <<EOF \nextend type Setting { storeDescription: String storeLanguage: String storeCurrency: String storeTimeZone: String storePhoneNumber: String storeEmail: String storeCountry: String storeAddress: String storeCity: String storeProvince: String storePostalCode: String } \n EOF \n cat ShippingSetting.graphql <<EOF \nextend type Setting { allowedCountries: [String] weightUnit: String } \n EOF \n cat Setting.graphql <<EOF \n""" Single store setting """ type Setting { storeName: String } extend type Query { setting: Setting } \n EOF \n cat StripeSetting.admin.graphql <<EOF \nextend type Setting { stripeSecretKey: String stripeEndpointSecret: String } \n EOF \n cat StripeSetting.graphql <<EOF \nextend type Setting { stripePaymentStatus: Int stripeDislayName: String stripePublishableKey: String } \n EOF \n cat Checkout.graphql <<EOF \n""" Represents a checkout object in the store. """ type Checkout { cartId: String! } extend type Query { checkout: Checkout! } \n EOF \n cat ShippingMethod.graphql <<EOF \n""" Represents a shipping method. """ type ShippingMethod { shippingMethodId: Int! uuid: String! name: String! } extend type Query { shippingMethods: [ShippingMethod] } \n EOF \n cat Cart.graphql <<EOF \n""" Shopping Cart interface """ interface ShoppingCart { currency: String! customerId: Int customerGroupId: Int customerEmail: String customerFullName: String userIp: String userId: String status: Int! coupon: String shippingFeeExclTax: Price! shippingFeeInclTax: Price! discountAmount: Price! subTotal: Price! totalQty: Int! totalWeight: Weight! taxAmount: Price! grandTotal: Price! shippingMethod: String shippingMethodName: String shippingAddress: Address paymentMethod: String paymentMethodName: String billingAddress: Address shippingNote: String } """ Shopping Cart Item interface """ interface ShoppingCartItem { productId: ID! productSku: String! productName: String thumbnail: String productWeight: Weight! productPrice: Price! productPriceInclTax: Price! qty: Int! finalPrice: Price! finalPriceInclTax: Price! taxPercent: Float! taxAmount: Price! discountAmount: Price! total: Price! variantGroupId: Int variantOptions: String productCustomOptions: String productUrl: String! } """ Address interface """ interface Address { fullName: String postcode: String telephone: String country: Country province: Province city: String address1: String address2: String } """ Represent a Cart Address """ type CartAddress implements Address { cartAddressId: Int! uuid: String! fullName: String postcode: String telephone: String country: Country province: Province city: String address1: String address2: String } """ Represent a Cart Item """ type CartItem implements ShoppingCartItem { cartItemId: ID uuid: String! cartId: ID! removeApi: String! productId: ID! productSku: String! productName: String thumbnail: String productWeight: Weight! productPrice: Price! productPriceInclTax: Price! qty: Int! finalPrice: Price! finalPriceInclTax: Price! taxPercent: Float! taxAmount: Price! discountAmount: Price! subTotal: Price! total: Price! variantGroupId: Int variantOptions: String productCustomOptions: String productUrl: String! errors: [String!] } """ Represent a Cart """ type Cart implements ShoppingCart { cartId: ID! uuid: String! items: [CartItem] shippingAddress: CartAddress billingAddress: CartAddress currency: String! customerId: Int customerGroupId: Int customerEmail: String customerFullName: String userIp: String userId: String status: Int! coupon: String shippingFeeExclTax: Price! shippingFeeInclTax: Price! discountAmount: Price! subTotal: Price! subTotalInclTax: Price! totalQty: Int! totalWeight: Weight! taxAmount: Price! grandTotal: Price! shippingMethod: String shippingMethodName: String paymentMethod: String paymentMethodName: String shippingNote: String addItemApi: String! addPaymentMethodApi: String! addShippingMethodApi: String! addContactInfoApi: String! addAddressApi: String! } extend type Query { cart(id: String): Cart } \n EOF \n cat ShippingZone.graphql <<EOF \n""" Represents a shipping method. """ type ShippingMethodByZone { methodId: Int! zoneId: Int! uuid: String! name: String! cost: Price isEnabled: Boolean! calculateApi: String conditionType: String max: Float min: Float updateApi: String! } """ Represents a shipping zone. """ type ShippingZone { shipping_zone_id: Int! uuid: String! name: String! country: Country! provinces: [Province] methods: [ShippingMethodByZone] updateApi: String! addMethodApi: String! removeMethodApi: String! } extend type Query { shippingZones: [ShippingZone] shippingZone(id: String!): ShippingZone } \n EOF \n cat Date.graphql <<EOF \n""" A date field. """ type Date { value: String text: String } \n EOF \n cat Weight.graphql <<EOF \n""" Represents a weight value. """ type Weight { value: Float! unit: String! text: String! } \n EOF \n cat Price.graphql <<EOF \n""" Represents a price value. """ type Price { value: Float! currency(currency: String): String! text(currency: String): String! } \n EOF \n cat BestSeller.admin.graphql <<EOF \nextend type Product { soldQty: Int } extend type Query { bestSellers: [Product] } \n EOF \n cat PaymentTransaction.admin.graphql <<EOF \n""" Represents a payment transaction """ type PaymentTransaction { paymentTransactionId: Int! uuid: String! transactionId: String! transactionType: String! amount: Price! parentTransactionId: String! paymentAction: String! additionalInformation: String! createdAt: String! } extend type Order { paymentTransactions: [PaymentTransaction] } \n EOF \n cat Order.admin.graphql <<EOF \nextend type Order { customerUrl: String editUrl: String! createShipmentApi: String! shipment: Shipment } extend type Shipment { updateShipmentApi: String! } extend type Query { orders(filters: [FilterInput]): OrderCollection } \n EOF \n cat Order.graphql <<EOF \n""" Represents an Order Address. """ type OrderAddress implements Address { orderAddressId: Int! uuid: String! fullName: String postcode: String telephone: String country: Country province: Province city: String address1: String address2: String } """ Represents an Order Item. """ type OrderItem { orderItemId: ID! uuid: String! orderId: ID! productId: ID! productSku: String! productName: String thumbnail: String productWeight: Weight! productPrice: Price! productPriceInclTax: Price! qty: Int! finalPrice: Price! finalPriceInclTax: Price! taxPercent: Float! taxAmount: Price! discountAmount: Price! subTotal: Price! total: Price! variantGroupId: Int variantOptions: String productCustomOptions: String productUrl: String } """ Represents an Order. """ type Order implements ShoppingCart { orderId: ID! uuid: String! orderNumber: String! items: [OrderItem] shippingAddress: OrderAddress billingAddress: OrderAddress currency: String! customerId: Int customerGroupId: Int customerEmail: String customerFullName: String userIp: String userId: String status: Int! coupon: String shippingFeeExclTax: Price! shippingFeeInclTax: Price! discountAmount: Price! subTotal: Price! subTotalInclTax: Price! totalQty: Int! totalWeight: Weight! taxAmount: Price! grandTotal: Price! shippingMethod: String shippingMethodName: String shipmentStatus: ShipmentStatus paymentMethod: String paymentMethodName: String paymentStatus: PaymentStatus shippingNote: String createdAt: Date! updatedAt: String! activities: [Activity] shipment: Shipment } """ Represents an Order Activity. """ type Activity { orderActivityId: Int! comment: String customerNotified: Int! createdAt: DateTime updatedAt: DateTime } """ Represents a Shipment. """ type Shipment { shipmentId: Int! uuid: String! carrier: String trackingNumber: String createdAt: DateTime! updatedAt: DateTime } """ Retrieve an list of order. """ type OrderCollection { items: [Order] currentPage: Int! total: Int! currentFilters: [Filter] } extend type Customer { orders: [Order] } extend type Query { order(uuid: String!): Order } \n EOF \n cat Status.graphql <<EOF \n""" Represents a payment status. """ type PaymentStatus { name: String code: String badge: String progress: String } """ Represents a shipment status. """ type ShipmentStatus { name: String code: String badge: String progress: String } extend type Query { shipmentStatusList: [ShipmentStatus] paymentStatusList: [PaymentStatus] } \n EOF \n cat Carrier.admin.graphql <<EOF \n""" The `Carrier` type defines the shipping carrier. """ type Carrier { name: String! code: String! trackingUrl: String } extend type Query { carriers: [Carrier] } \n EOF \n
